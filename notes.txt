
///////////////////////////////////////////////////////////////////////////////

// DEFINED IN "js/sandbox-r1.js":
//
//   + When a "place_changed" event triggers "origin_autocomplete", it run the
//     function "getNewPlace()".
//
//   + When "getNewPlace()" runs, it will trigger the function "setCenter()".
//
//   + When "setCenter()" runs, it will trigger the function "geocodeLatLng()".

///////////////////////////////////////////////////////////////////////////////

// SPEED ENGINE EVENTS:

//   + When "geocodeLatLng()" runs in the SPEED engine, it will trigger
//     the function "changeSite(latitude, longitude, theBuilding)",
//     defined in "geometryViz.html".
//
//   + When "changeSite(latitude, longitude, theBuilding)" runs, it will
//     trigger the function "setTimezone(latitude, longitude, theBuilding)",
//     defined in "geometryViz.html".
//
//   + When "setTimezone(latitude, longitude, theBuilding)" runs, it
//     will send an HTTP "GET" request to Google Map's timezone API,
//     and store the response to "theBuilding" object.
//
//   + When "setTimezone(latitude, longitude, theBuilding)" runs, it
//     *should* post a message to the theBuilding iframe, defined in
//     "layout.ejs".
//
//        - In this sandbox model, the function "refreshMap()" will be
//          substituted for "setTimezone(latitude, longitude, theBuilding)",
//          defined in "js/sandbox-r1.js".
//
//   + When theBuilding iframe ("layout.ejs") receives a message in which
//     the map has somehow changed, it will trigger the class method
//     "googleMapOverlay.updateMap(longitude, latitude, mapType, isSI, size)",
//     defined in "sunpath.js".

///////////////////////////////////////////////////////////////////////////////

// DEFINED IN "sunpath.js":
//
//   + When the class method "googleMapOverlay.updateMap(...)" runs,
//     it will trigger the local function
//     "drawMapOverlay(longitude, latitude, mapType, isSI, size)".
//
//   + When "drawMapOverlay(longitude,latitude,mapType,isSI,size)" runs,
//     it will return a 'canvas' element with the Google Map tiles to
//     the class method "googleMapOverlay.updateMap(...)".
//
//   + When "googleMapOverlay.updateMap(...)" receives the canvas element
//     with the Google map tiles, it calls it's parent class,
//     "speedBaseClass" to add the map overlay to the scene.
//
//   + "speedBaseClass" is defined in "speedLib.js".

///////////////////////////////////////////////////////////////////////////////

// REQUIRED MODULES:
//
//   + Functions from "geometryViz.html"
//
//   + Equivalent of "layout.ejs"
//
//   + "js/sandbox-r1.js"
//
//   + "speedLib.js"
//
//   + "sunpath.js"

///////////////////////////////////////////////////////////////////////////////